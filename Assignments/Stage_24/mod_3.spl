//File Manager Module

alias functionNum R1;


//Open Function
if(functionNum==3) then

    alias fileName R2;


    //Find the index of the Inode Table entry of the file. If the entry is not found, return -1.
    alias index R3;
    index=0;
    while(index<MAX_FILE_NUM && [INODE_TABLE+(index*16)+1]!=fileName) do
        index=index+1;    
    endwhile;
    if(index==MAX_FILE_NUM) then
        R0=-1;
        return;
    endif;

    alias pid R4;
    pid=[SYSTEM_STATUS_TABLE+1];

    //Call the acquire_inode() function in the Resource Manager module.
    multipush(R1,R2,R3,R4);
    R1=4;   //Acquire inode function
    R2=index;   //Inode Index
    R3=pid;     //PID
    call MOD_0; //Resource Manager
    multipop(R1,R2,R3,R4);

    //If the locking fails, Return -1. 
    if(R0==-1) then
        return;     //R0 already contains -1
    endif;


    alias inodeTableEntry R5;
    inodeTableEntry=INODE_TABLE+(index*16);

    //If the file is of type EXEC, release_inode() and Return -1. 
    if([inodeTableEntry]==EXEC) then
        multipush(R1,R2,R3,R4,R5);
        R1=5;   //Release Inode function
        R2=index;   //Inode Index
        R3=pid;     //PID
        call MOD_0; //Resource Manager
        multipop(R1,R2,R3,R4,R5);

        R0=-1;
        return;
    
    endif;


    alias FileTableIndex R6;
    FileTableIndex=0;

    //Find a free entry in the Open File Table.
    while(FileTableIndex<MAX_OPENFILE_NUM && [OPEN_FILE_TABLE+(FileTableIndex*4)]!=-1) then
        FileTableIndex=FileTableIndex+1;
    endwhile;

    //If there are no free entries, release_inode() and Return -2.
    if(FileTableIndex==MAX_OPENFILE_NUM) then
        multipush(R1,R2,R3,R4,R5,R6);
        R1=5;   //Release Inode function
        R2=index;   //Inode Index
        R3=pid;     //PID
        call MOD_0; //Resource Manager
        multipop(R1,R2,R3,R4,R5,R6);

        R0=-2;
        return;
    endif;

    alias openFileTableEntry R7;
    openFileTableEntry=OPEN_FILE_TABLE+(FileTableIndex*4);

    if(fileName=="root") then
        //Set the INODE INDEX field in the open file table entry to INODE_ROOT. 
        [openFileTableEntry]=INODE_ROOT;
    else
        //In the File Status Table, if the File Open Count is -1, set it to 1. Otherwise, increment the File Open Count.
        alias fileOpenCount R8;
        fileOpenCount=FILE_STATUS_TABLE+(4*index)+1;
        if([fileOpenCount]==-1) then
            [fileOpenCount]=1;
        else
            [fileOpenCount]=[fileOpenCount]+1;
        endif;
        //Set the INODE INDEX field in the open file table entry to the inode table index of the file. 
        [openFileTableEntry]=index;
    endif;

    //Set the OPEN INSTANCE COUNT to 1 and LSEEK to 0 in the open file table entry.
    [openFileTableEntry+1]=1;
    [openFileTableEntry+2]=0;


    //Call the release_inode() function in the Resource Manager module. 
    multipush(R1,R2,R3,R4,R5,R6,R7,R8);
    R1=5;   //Release Inode function
    R2=index;   //Inode Index
    R3=pid;     //PID
    call MOD_0; //Resource Manager
    multipop(R1,R2,R3,R4,R5,R6,R7,R8);


    //Return the Open File Table Index.
    R0=FileTableIndex;

    return;

endif;